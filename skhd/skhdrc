#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]



# Window Navigation (through display borders): alt - {h, j, k, l}
alt - h    : yabai -m window --focus west  || yabai -m display --focus west
alt - j    : yabai -m window --focus south || yabai -m display --focus south
alt - k    : yabai -m window --focus north || yabai -m display --focus north
alt - l    : yabai -m window --focus east  || yabai -m display --focus east
# Alternatively Window Navigation (through display borders): alt - {left,down,up,right}
alt - left      : yabai -m window --focus west  || yabai -m display --focus west
alt - down      : yabai -m window --focus south || yabai -m display --focus south
alt - up        : yabai -m window --focus north || yabai -m display --focus north
alt - right     : yabai -m window --focus east  || yabai -m display --focus east

# follow focus
alt - 1 : yabai -m space --focus 1 
alt - 2 : yabai -m space --focus 2 
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9

## Window Movement (shift + lalt - ...)
# Moving windows in spaces: shift + lalt - {h, j, k, l}
shift + alt - h : yabai -m window --warp west
shift + alt - j : yabai -m window --warp south
shift + alt - k : yabai -m window --warp north
shift + alt - l : yabai -m window --warp east

# Alternatively Window Navigation (through display borders): alt - {left,down,up,right}
shift + alt - left  : yabai -m window --warp west
shift + alt - down  : yabai -m window --warp south
shift + alt - up    : yabai -m window --warp north
shift + alt - right : yabai -m window --warp east

# send window to desktop and follow focus
shift + alt - 0 : yabai -m space --balance
shift + alt - 1 : yabai -m window --space  1; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space  2; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space  3; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space  4; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space  5; yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space  6; yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space  7; yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space  8; yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space  9; yabai -m space --focus 9

## Resize (ctrl + lalt - ...)
# Resize windows: ctrl + alt - {h,j,k,l}
ctrl + alt - h  : yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0
ctrl + alt - j  : yabai -m window --resize bottom:0:100 || yabai -m window --resize top:0:100
ctrl + alt - k  : yabai -m window --resize bottom:0:-100 || yabai -m window --resize top:0:-100
ctrl + alt - l  : yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0

# Create space
shift + cmd - n : yabai -m space --create && \
    index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
    yabai -m window --space "${index}" && \
    yabai -m space --focus "${index}"

# Float / Unfloat window: alt - space
alt - space : yabai -m window --toggle float; sketchybar --trigger window_focus

# Make window zoom to parent node: alt - f 
alt - f         : yabai -m window --toggle zoom-parent; sketchybar --trigger window_focus
shift + alt - f : yabai -m window --toggle zoom-fullscreen; sketchybar --trigger window_focus

# Applications
# open terminal, blazingly fast compared to iTerm/Hyper
alt - return : open -a "Alacritty" -n
cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# open Brave
alt - b : open -a "Brave Browser Nightly" -n

#reload
