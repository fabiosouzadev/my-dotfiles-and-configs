- create:
    - ~/.local/src
    - ~/.local/bin

- shell:
    - description: Validating sudo credentials
      command: "sudo --validate"

    - description: Configure keyboard
      command: "[ -d /etc/X11/xorg.conf.d/ ] && sudo cp xorg/00-keyboard.conf /etc/X11/xorg.conf.d/"

    - description: Update Ubuntu repositories
      command: |
        case $(lsb_release -is) in
          Ubuntu)
            curl https://baltocdn.com/i3-window-manager/signing.asc | sudo apt-key add -
            sudo apt-get install -y apt-transport-https --yes
            echo "deb https://baltocdn.com/i3-window-manager/i3/i3-autobuild-ubuntu/ all main" | sudo tee /etc/apt/sources.list.d/i3-autobuild.list
        ;;
        esac
    - description: Install i3
      command: |
        case $(lsb_release -is) in
          Ubuntu)
            sudo apt-get update -y
            sudo apt-get install -y \
              i3 \
              i3-wm \
              i3lock \
              i3status \
              i3blocks \
              suckless-tools \
              network-manager-gnome \
              picom \
              rofi \
              nitrogen \
              feh \
              brightnessctl \
              terminator \
              polybar \
              flameshot \
              arandr 
          ;;
        esac

    - description: Install i3-gaps
      command: |

        case $(lsb_release -is) in
          Ubuntu)
            # sudo add-apt-repository -y ppa:regolith-linux/stable
            # sudo apt install i3-gaps
            sudo apt-get install -y \
              libxcb1-dev \
              libxcb-keysyms1-dev \
              libpango1.0-dev \
              libxcb-util0-dev \
              libxcb-icccm4-dev \
              libyajl-dev \
              libstartup-notification0-dev \
              libxcb-randr0-dev \
              libev-dev \
              libxcb-cursor-dev \
              libxcb-xinerama0-dev \
              libxcb-xkb-dev libxkbcommon-dev \
              libxkbcommon-x11-dev \
              autoconf libxcb-xrm0 \
              libxcb-xrm-dev \
              automake \
              libxcb-shape0-dev \
              libxcb-xrm-dev \
              libxcb-damage0-dev 

            cd $HOME/.local/src/

            # clone the repository
            [ -d $HOME/.local/src/i3-gaps ] || git clone https://www.github.com/Airblader/i3 $HOME/.local/src/i3-gaps
            cd $HOME/.local/src/i3-gaps

            git checkout gaps && git pull
            sudo apt install -y meson asciidoc
            meson -Ddocs=true -Dmans=true ../build
            meson compile -C ../build
            sudo meson install -C ../build
          ;;
        esac
      stdout: true

    - description: Install picom-allusive
      command: |
        case $(lsb_release -is) in
          Ubuntu)
            sudo apt-get install -y \
              libconfig-dev \
              libdbus-1-dev \
              libegl-dev \
              libev-dev \
              libgl-dev \
              libpcre2-dev \
              libpixman-1-dev \
              libx11-xcb-dev \
              libxcb1-dev \
              libxcb-composite0-dev \
              libxcb-damage0-dev \
              libxcb-dpms0-dev \
              libxcb-glx0-dev \
              libxcb-image0-dev \
              libxcb-present-dev \
              libxcb-randr0-dev \
              libxcb-render0-dev \
              libxcb-render-util0-dev \
              libxcb-shape0-dev \
              libxcb-util-dev \
              libxcb-xfixes0-dev \
              libxext-dev \
              meson \
              ninja-build \
              uthash-dev
          ;;
        esac
        
        if [ -d $HOME/.local/src/picom-allusive ]; then 
          sudo rm -r $HOME/.local/src/picom-allusive
        fi
        if [ -d $HOME/.local/src/picom ]; then 
          sudo rm -r $HOME/.local/src/picom
        fi
        
        git clone https://github.com/allusive-dev/picom-allusive.git $HOME/.local/src/picom-allusive
        cd $HOME/.local/src/picom-allusive
        meson setup --buildtype=release . build
        ninja -C build
        sudo ninja -C build install

      stdout: true

    # - description: Install picom
    #   command: |
    #     case $(lsb_release -is) in
    #       Ubuntu)
    #         sudo apt-get install -y \
    #           libconfig-dev \
    #           libdbus-1-dev \
    #           libegl-dev \
    #           libev-dev \
    #           libgl-dev \
    #           libpcre2-dev \
    #           libpixman-1-dev \
    #           libx11-xcb-dev \
    #           libxcb1-dev \
    #           libxcb-composite0-dev \
    #           libxcb-damage0-dev \
    #           libxcb-dpms0-dev \
    #           libxcb-glx0-dev \
    #           libxcb-image0-dev \
    #           libxcb-present-dev \
    #           libxcb-randr0-dev \
    #           libxcb-render0-dev \
    #           libxcb-render-util0-dev \
    #           libxcb-shape0-dev \
    #           libxcb-util-dev \
    #           libxcb-xfixes0-dev \
    #           libxext-dev \
    #           meson \
    #           ninja-build \
    #           uthash-dev
    #       ;;
    #     esac
    #     
    #     if [ -d $HOME/.local/src/picom-allusive ]; then 
    #       sudo rm -r $HOME/.local/src/picom-allusive
    #     fi
    #     if [ -d $HOME/.local/src/picom ]; then 
    #       sudo rm -r $HOME/.local/src/picom
    #     fi
    #     
    #     git clone https://github.com/jonaburg/picom.git $HOME/.local/src/picom
    #     cd $HOME/.local/src/picom
    #     meson setup --buildtype=release . build
    #     ninja -C build
    #     sudo ninja -C build install
    #
    #   stdout: true

    - description: Install dunst
      command: |
        case $(lsb_release -is) in
          Ubuntu)
            sudo apt-get install -y \
              libdbus-1-dev \
              libx11-dev \
              libxinerama-dev \
              libxrandr-dev \
              libxss-dev \
              libglib2.0-dev \
              libpango1.0-dev \
              libgtk-3-dev \
              libxdg-basedir-dev \
              libnotify-dev

            [ -d $HOME/.local/src/dunst ] || git clone https://github.com/dunst-project/dunst.git $HOME/.local/src/dunst
            cd $HOME/.local/src/dunst
            git pull
            make
            sudo make install
          ;;
        esac

- link:
    ~/.config/i3: i3
    ~/.config/dunst: dunst
    ~/.config/rofi: rofi
    ~/.config/picom.conf: picom/picom.conf
    ~/.config/polybar:
    ~/.config/wallpapers: wallpapers
    ~/.config/xfce4/terminal: xfce4/terminal
    ~/.config/greenclip.toml:
      if: "[`lsb_release -is` = EndeavourOS]"
      path: greenclip/greenclip.toml
    ~/.screenlayout:
      if: "[`lsb_release -is` = EndeavourOS]"
      path: monitors/xrand
    ~/.config/monitors.xml: monitors/monitors.xml
    ~/.config/gtk-3.0:
      if: "[`lsb_release -is` = EndeavourOS]"
      path: gtk-3.0
