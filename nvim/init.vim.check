" Sets {{{
" ---------------------------------------------------------------------
set exrc
set splitright
set splitbelow
set formatoptions-=t
set undofile
set incsearch
set signcolumn=yes
set encoding=UTF-8
set nojoinspaces " don't autoinsert two spaces after '.', '?', '!' for join command

" Sets }}}


" Auto CMD {{{

" File types {{{
"---------------------------------------------------------------------
" JavaScript, Typescript
autocmd BufNewFile,BufRead *.es6 set filetype=javascript
autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" Markdown
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.mdx set filetype=markdown
" Flow
au BufNewFile,BufRead *.flow set filetype=javascript
" Fish
au BufNewFile,BufRead *.fish set filetype=fish

set suffixesadd=.js,.es,.jsx,.json,.css,.less,.sass,.styl,.php,.py,.md

" autocmd FileType coffee setlocal shiftwidth=2 tabstop=2
" autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
" autocmd FileType yaml setlocal shiftwidth=2 tabstop=2

" }}}


" Theme {{{
"---------------------------------------------------------------------
" JavaScript, Typescript
augroup colorscheme_opts
au!
au ColorScheme * hi Normal guibg=NONE
au ColorScheme * hi SignColumn guibg=NONE
au ColorScheme * hi CursorColumn guibg=#404040
au ColorScheme * hi CursorLineNr term=bold ctermfg=Yellow gui=bold guifg=Yellow
au ColorScheme * hi LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
au ColorScheme * hi FloatBorder guifg=#eeeeee
augroup END
" CursorColumn }}}


" Auto CMD }}}

" for test Ale + Coc {{{
let g:ale_disable_lsp = 1
" for test Ale + Coc }}}

" Plugins {{{
" ---------------------------------------------------------------------
if has("nvim")
    let g:plug_home = stdpath('data') . '/plugged'
endif
call plug#begin()
" PlugInstall PlugClean PlugUpdate

" Visual / Themes

" Navigation

" Editing

" Behaviour/tools

" Auto-completion / Prettier
Plug 'editorconfig/editorconfig-vim'
Plug 'sheerun/vim-polyglot'
Plug 'SirVer/ultisnips'

Plug 'dense-analysis/ale'
Plug 'maximbaz/lightline-ale'

""" JS,Typescript
Plug 'pangloss/vim-javascript'    " JavaScript support
Plug 'leafgarland/typescript-vim' " TypeScript syntax
"Plug 'maxmellon/vim-jsx-pretty'  " don't need with vim-polyglot
Plug 'peitalin/vim-jsx-typescript'
Plug 'mlaursen/vim-react-snippets' " Snippets from ultisnips
Plug 'honza/vim-snippets'

Plug 'styled-components/vim-styled-components', {'branch': 'main'}
Plug 'jparise/vim-graphql'        " GraphQL syntax

"""" COC
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Git
"Plug 'jreybert/vimagit'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'



if has("nvim")
" Language Server Protocol

" File Management
Plug 'nvim-lua/popup.nvim'
" Plug 'sudormrfbin/cheatsheet.nvim'
" Plug 'ThePrimeagen/harpoon'

" Visual / Themes
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Navigation
" Editing
" Behaviour/tools
" Auto-completion
" Git
endif

call plug#end()

" Plugins }}}


" CoC Configs {{{
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"


function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


" Add CoC Prettier if prettier is installed
"if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
"    let g:coc_global_extensions += ['coc-prettier']
"endif

" Add CoC ESLint if ESLint is installed
"if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
"    let g:coc_global_extensions += ['coc-eslint']
"endif

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>do <Plug>(coc-codeaction)

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nnoremap <silent> <space>d :<C-u>CocList diagnostics<cr>
nnoremap <silent> <space>s :<C-u>CocList -I symbols<cr>
" CoC Configs }}}

" dense-analysis/ale {{{
augroup FiletypeGroup
    autocmd!
    au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
augroup END
nnoremap <leader>af :ALEFix<cr>

" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1
"let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_fixers = {
    \   'javascript': ['prettier', 'eslint'],
    \   'typescript': ['prettier', 'eslint'],
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \}
let g:ale_linters = {
    \   'javascript': ['eslint'],
    \   'typescript': ['eslint'],
    \}


"let g:ale_linters = {
" \   'javascript': ['standard', 'prettier','eslint'],
" \   'typescript': ['standard', 'prettier','eslint']
" \ }
"let g:ale_fixers = {'javascript': ['standard', 'prettier','eslint'],'typescript': ['standard', 'prettier','eslint']}

" dense-analysis/ale }}}

" pangloss/vim-javascript {{{
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
" pangloss/vim-javascript }}}

" peitalin/vim-jsx-typescript {{{
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact
" peitalin/vim-jsx-typescript }}}

" PYTHON PROVIDERS {{{

if has('macunix')
" OSX
let g:python3_host_prog = '/usr/local/bin/python3' " -- Set python 3 provider
let g:python_host_prog = '/usr/local/bin/python2' " --- Set python 2 provider

elseif has('unix')

" Ubuntu
let g:python3_host_prog = '/usr/bin/python3' " -------- Set python 3 provider
let g:python_host_prog = '/usr/bin/python' " ---------- Set python 2 provider

elseif has('win32') || has('win64')
" Window

endif

" }}}
