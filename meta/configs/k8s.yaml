- create:
    - ~/.local/src
    - ~/.local/bin
    - ~/.local/share
    - ~/.kube
    - ~/.cache/kube
- shell:
    - description: Validating sudo credentials
      command: "sudo --validate"
    - description: Install kubectl
      command: |
        if [ -f $HOME/.local/src/kubectl ]; then
            sudo rm $HOME/.local/src/kubectl
            sudo rm $HOME/.local/src/kubectl.sha256
        fi

        if [ -f $HOME/.local/bin/kubectl ]; then
            sudo rm $HOME/.local/bin/kubectl
        fi


        cd $HOME/.local/src
        
        if [ `uname` = 'Darwin' ]; then
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl.sha256"
          CHECKSUMFILE="$(cat $HOME/.local/src/kubectl.sha256)"

          if echo "$CHECKSUMFILE kubectl" | shasum -a 256 --check -; then
            chmod +x ./kubectl
            cp -v kubectl ~/.local/bin/kubectl
          fi

        elif [ `uname` = 'Linux' ]; then 
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          CHECKSUMFILE="$(cat $HOME/.local/src/kubectl.sha256)"

          if echo "$CHECKSUMFILE kubectl" | sha256sum --check -; then
            chmod +x kubectl
            cp -v kubectl ~/.local/bin/kubectl
          fi
        fi

    - description: Installing kind
      command: |
        OS=`uname`
        VERSION='v0.20.0'
        
        if [ -f $HOME/.local/bin/kind ];then
          sudo rm $HOME/.local/bin/kind
        fi
        
        curl -Lo $HOME/.local/bin/kind https://kind.sigs.k8s.io/dl/${VERSION}/kind-${OS}-amd64
        chmod +x $HOME/.local/bin/kind

    - description: Installing minikube
      command: |
        if [ `uname` = 'Darwin' ]; then
          r=https://api.github.com/repos/kubernetes/minikube/releases
          curl -Lo $HOME/.local/src/minikube-darwin-amd64 $(curl -s $r | grep -o 'http.*download/v.*beta.*/minikube-darwin-amd64' | head -n1)
          sudo install $HOME/.local/src/minikube-darwin-amd64 $HOME/.local/bin/minikube
        elif [ `uname` = 'Linux' ]; then
          r=https://api.github.com/repos/kubernetes/minikube/releases
          curl -Lo $HOME/.local/src/minikube-linux-amd64 $(curl -s $r | grep -o 'http.*download/v.*beta.*/minikube-linux-amd64' | head -n1)
          sudo install $HOME/.local/src/minikube-linux-amd64 $HOME/.local/bin/minikube
        fi
    - description: Installing kubectx
      command: |
        [ -d $HOME/.local/share/kubectx ]   || git clone https://github.com/ahmetb/kubectx  $HOME/.local/share/kubectx
        [ -f $HOME/.local/bin/kubectx ]     || ln -sf $HOME/.local/share/kubectx/kubectx    $HOME/.local/bin/kubectx
        [ -f $HOME/.local/bin/kubens ]      || ln -sf $HOME/.local/share/kubectx/kubens     $HOME/.local/bin/kubens
    - description: Installing Lens
      command: |
        if [ `uname` = 'Linux' ]; then
          case $(lsb_release -is) in
            Ubuntu)
              curl -fsSL https://downloads.k8slens.dev/keys/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/lens-archive-keyring.gpg > /dev/null
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/lens-archive-keyring.gpg] https://downloads.k8slens.dev/apt/debian stable main" | sudo tee /etc/apt/sources.list.d/lens.list > /dev/null
              sudo apt update
              sudo apt install lens
            ;;
            Arch | EndeavourOS)
              curl -Lo $HOME/.local/bin/lens https://api.k8slens.dev/binaries/latest.x86_64.AppImage
              if [ -f $HOME/.local/bin/Lens ]; then
                chmod +x $HOME/.local/bin/lens
              fi
              LENS_SHORTCUT="[Desktop Entry]
              Name=Lens
              Exec=$HOME/.local/bin/lens %U
              Terminal=false
              Type=Application
              Icon=lens
              StartupWMClass=Lens
              Comment=Lens - The Kubernetes IDE
              MimeType=x-scheme-handler/lens;
              Categories=Network;"

              echo $LENS_SHORTCUT > $HOME/.local/share/applications/lens.desktop
            ;;
          esac
        elif [ `uname` = 'Darwin' ]; then
          brew install --cask lens
        fi
    - description: Installing ArgoCD cli
      command: |
        OS=`uname`
        VERSION=$(curl --silent "https://api.github.com/repos/argoproj/argo-cd/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
        curl -sSL -o $HOME/.local/src/argocd-$OS-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-$OS-amd64
        sudo install -m 555 $HOME/.local/src/argocd-$OS-amd64 $HOME/.local/bin/argocd
    - [exec $SHELL]
