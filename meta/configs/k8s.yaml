- create:
    - ~/.local/src
    - ~/.local/bin
    - ~/.local/share
    - ~/.kube
- shell:
    - description: Validating sudo credentials
      command: "sudo --validate"
    - description: Install kubectl
      command: |
        OS=`uname`
        curl -Lo $HOME/.local/bin/kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/${OS}/amd64/kubectl"
        if [ -f $HOME/.local/bin/kubectl ];then
            chmod +x $HOME/.local/bin/kubectl
        fi
    - description: Installing kind
      command: |
        OS=`uname`
        curl -Lo $HOME/.local/bin/kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-${OS}-amd64
        if [ -f $HOME/.local/bin/kind ];then
          chmod +x $HOME/.local/bin/kind
        fi
    - description: Installing minikube
      command: |
        if [ `uname` = 'Darwin' ]; then
          r=https://api.github.com/repos/kubernetes/minikube/releases
          curl -Lo $HOME/.local/src/minikube-darwin-amd64 $(curl -s $r | grep -o 'http.*download/v.*beta.*/minikube-darwin-amd64' | head -n1)
          sudo install $HOME/.local/src/minikube-darwin-amd64 $HOME/.local/bin/minikube
        elif [ `uname` = 'Linux' ]; then
          r=https://api.github.com/repos/kubernetes/minikube/releases
          curl -Lo $HOME/.local/src/minikube-linux-amd64 $(curl -s $r | grep -o 'http.*download/v.*beta.*/minikube-linux-amd64' | head -n1)
          sudo install $HOME/.local/src/minikube-linux-amd64 $HOME/.local/bin/minikube
        fi
    - description: Installing kubectx
      command: |
        [ -d $HOME/.local/share/kubectx ]   || git clone https://github.com/ahmetb/kubectx  $HOME/.local/share/kubectx
        [ -f $HOME/.local/bin/kubectx ]     || ln -sf $HOME/.local/share/kubectx/kubectx    $HOME/.local/bin/kubectx
        [ -f $HOME/.local/bin/kubens ]      || ln -sf $HOME/.local/share/kubectx/kubens     $HOME/.local/bin/kubens
    - description: Installing kubeswitch
      command: |
        OS=`uname`                        # Pick the right os: linux, darwin (intel only)
        VERSION=0.7.2                     # Pick the current version.

        curl -Lo $HOME/.local/bin/switcher https://github.com/danielfoehrKn/kubeswitch/releases/download/${VERSION}/switcher_${OS}_amd64
        chmod +x $HOME/.local/bin/switcher

        curl -Lo $HOME/.local/bin/switch.sh https://github.com/danielfoehrKn/kubeswitch/releases/download/${VERSION}/switch.sh
        chmod +x $HOME/.local/bin/switch.sh
    - description: Installing k9s
      command: |
        curl -sS https://webinstall.dev/k9s | sh 
    - description: Installing Lens
      command: |
        if [ `uname` = 'Linux' ]; then 
          case $(lsb_release -is) in 
            Ubuntu) 
              curl -fsSL https://downloads.k8slens.dev/keys/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/lens-archive-keyring.gpg > /dev/null
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/lens-archive-keyring.gpg] https://downloads.k8slens.dev/apt/debian stable main" | sudo tee /etc/apt/sources.list.d/lens.list > /dev/null
              sudo apt update
              sudo apt install lens
            ;;
            Arch | EndeavourOS)
              curl -Lo $HOME/.local/bin/lens https://api.k8slens.dev/binaries/latest.x86_64.AppImage
              if [ -f $HOME/.local/bin/Lens ]; then
                chmod +x $HOME/.local/bin/lens
              fi
              LENS_SHORTCUT="[Desktop Entry]
              Name=Lens
              Exec=$HOME/.local/bin/lens %U
              Terminal=false
              Type=Application
              Icon=lens
              StartupWMClass=Lens
              Comment=Lens - The Kubernetes IDE
              MimeType=x-scheme-handler/lens;
              Categories=Network;"
              
              echo $LENS_SHORTCUT > $HOME/.local/share/applications/lens.desktop
            ;;
          esac
        elif [ `uname` = 'Darwin' ]; then
          brew install --cask lens
        fi
    - description: Installing ArgoCD cli
      command: |
        OS=`uname`
        VERSION=$(curl --silent "https://api.github.com/repos/argoproj/argo-cd/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
        curl -sSL -o $HOME/.local/src/argocd-$OS-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-$OS-amd64
        sudo install -m 555 $HOME/.local/src/argocd-$OS-amd64 $HOME/.local/bin/argocd
        
    - description: Installing Gitlab Runner cli
      command: |
        if [ `uname` = 'Darwin' ]; then
          curl --output $HOME/.local/bin/gitlab-runner "https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64"
        elif [ `uname` = 'Linux' ]; then
          curl -L --output $HOME/.local/bin/gitlab-runner "https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64"
        fi
        sudo chmod +x $HOME/.local/bin/gitlab-runner
    - description: Installing gcloud
      command: |
        OS=`uname`
        VERSION=433.0.1
        curl "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-$VERSION-$OS-x86_64.tar.gz" | tar -xz -C $HOME/.local/src
        cd $HOME/.local/src/google-cloud-sdk
        sh install.sh --quiet --install-python false
        gcloud components install gke-gcloud-auth-plugin
    - [exec /bin/zsh]
- link:
    ~/.zshrc.d/012-kubectl-completions.zsh: zshrc.d/012-kubectl-completions.zsh
    ~/.zshrc.d/014-gcloud.zsh: zshrc.d/014-gcloud.zsh
    ~/.zshrc.d/016-k9s-completions.zsh: zshrc.d/016-k9s-completions.zsh
    ~/.zshrc.d/017-switch-completions.zsh: zshrc.d/017-switch-completions.zsh
    ~/.config/k9s: k9s
